    // [1, width, width+1, width+2],
    // [1, width+1, width+2, width*2+1],
    // [width, width+1, width+2, width*2+1],
    // [1, width, width+1,width*2+1]


// make the tetromino move down every second; invoked when browser loads
// timerId = setInterval(moveDown, 500)

from draw:
        // const nextPos = currentPosition + index;
        // if (nextPos < squares.length) {
            // squares[nextPos].classList.add("tetro");
            // squares[nextPos].style.backgroundColor = colors[random];
        // }
        
// Variable to store the interval ID for continuous drop
// let moveDownInterval;

// Function to start moving down continuously
// function startMoveDown() {
//     clearInterval(timerId); // Clear the previous timerID
//     clearInterval(moveDownInterval);
//     moveDownInterval = setInterval(moveDown, 100); 
// }

// function stopMoveDown() {
//     clearInterval(moveDownInterval);
//     if (!timerId) {
//         timerId = setInterval(moveDown, 500); // Reset the timer
//     }
// }

// Event listener for keydown event
// document.addEventListener('keydown', control);

// Attach stopMoveDown function to keyup event to stop movement when key released
// document.addEventListener('keyup', (e) => {
//     if (e.key === 40) {
//         stopMoveDown();
//     }
// })
// move down function


// Remove the row from the squares array
// function removeRow(rowIndex) {
//     const removedRow = squares.splice(rowIndex, width);
//     // Remove styles
//     removedRow.forEach(square => {
//         square.classList.remove('taken', 'tetro');
//         square.style.backgroundColor = '';
//     })
//     // Prepend a new row at the beginning of the squares array
//     squares = removedRow.concat(squares);
//     squares.forEach(cell => grid.appendChild(cell));
// }

/*
119; moveDown
96: undraw




*/